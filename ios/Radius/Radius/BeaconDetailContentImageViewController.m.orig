//
//  BeaconDetailContentImageViewController.m
//  radius
//
//  Created by Hud on 9/6/12.
//
//

#import "BeaconDetailContentImageViewController.h"
#import "BeaconContentViewController2.h"
#import "ProfileViewController2.h"
#import "MFSlidingView.h"
#import "PopupView.h"

@interface BeaconDetailContentImageViewController () <SlidingCommentDelegate>
{
    UITapGestureRecognizer *imageTapRecognizer;
    UIView * container;
}

@end

@implementation BeaconDetailContentImageViewController
@synthesize voteButtonOutlet;
@synthesize commentButtonOutlet;
@synthesize voteScoreLabel;

@synthesize beaconNameButton, nameButton, descriptionLabel;


@synthesize DetailContentImageView;
@synthesize BeaconImageCommentTableViewOutlet;
@synthesize contentNotVotedYet, contentVotedDown, contentVotedUp, contentVoteStatus;
@synthesize contentVoteScore;
@synthesize beaconNameString, beaconIDString;
@synthesize contentString, contentType, contentID;
@synthesize beaconContentDictionary;
@synthesize userNameString, userTokenString;
@synthesize contentImageHeight, contentImageWidth;
@synthesize likeCountLabel, commentCountLabel;
@synthesize likeCountString, commentCountString;
@synthesize frameContentImageHeight, frameContentImageWidth;
@synthesize frameContentOriginX, frameContentOriginY;
@synthesize topInfoBarView, bottomInfoBarView;
@synthesize beaconDetailContentImageDelegate;
<<<<<<< HEAD
@synthesize posterIDString;
@synthesize contentOwnerSettingsButton;
@synthesize currentUserIsContentOwner;
=======
@synthesize likeView, commentView;

>>>>>>> 096243ddec8e4b6cced09b9b20a441e87a046fae

- (void) setupLikeAndCommentLabels {
    
    likeCountLabel.font = [UIFont fontWithName:@"QuicksandBold-Regular" size:likeCountLabel.font.pointSize];
    commentCountLabel.font = [UIFont fontWithName:@"QuicksandBold-Regular" size:commentCountLabel.font.pointSize];
    
    UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:likeView.bounds byRoundingCorners:UIRectCornerBottomLeft cornerRadii:CGSizeMake(10.0, 10.0)];
    
    CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];
    maskLayer.frame = likeView.bounds;
    maskLayer.path = maskPath.CGPath;
    likeView.layer.mask = maskLayer;
    
    UIBezierPath *commentMaskPath = [UIBezierPath bezierPathWithRoundedRect:commentView.bounds byRoundingCorners:UIRectCornerBottomRight cornerRadii:CGSizeMake(10.0, 10.0)];
    
    CAShapeLayer *commentMaskLayer = [[CAShapeLayer alloc] init];
    commentMaskLayer.frame = commentView.bounds;
    commentMaskLayer.path = commentMaskPath.CGPath;
    commentView.layer.mask = commentMaskLayer;
    
    if ([likeCountString integerValue] == 0){
        
        likeCountLabel.hidden = YES;

    }
//    else if ([likeCountString integerValue] == 1){
//
//        likeCountLabel.hidden = NO;
//
//        likeCountLabel.text = likeCountString;
//        likeCountLabel.textColor = [UIColor blackColor];
//        likeCountLabel.backgroundColor = [UIColor whiteColor];
//        likeCountLabel.layer.cornerRadius = 3;
//        likeCountLabel.textAlignment = UITextAlignmentCenter;
//        likeCountLabel.font = [UIFont fontWithName:@"QuicksandBold-Regular" size:12.0];
//        
//        
//        likeCountLabel.numberOfLines = 1;
//        CGSize maximumLabelSize = CGSizeMake(9999,likeCountLabel.frame.size.height);
//        CGSize expectedLabelSize = [[likeCountLabel text] sizeWithFont:[likeCountLabel font]
//                                                     constrainedToSize:maximumLabelSize
//                                                         lineBreakMode:[likeCountLabel lineBreakMode]];
//        expectedLabelSize.width = expectedLabelSize.width +5;
//        [likeCountLabel setFrame:CGRectMake(186, likeCountLabel.frame.origin.y, expectedLabelSize.width, 16)];
//        
//        
//    }else if ([likeCountString integerValue] != 0 && [likeCountString integerValue] >1) {
//        likeCountLabel.hidden = NO;
//
//        likeCountLabel.text = likeCountString;
//        likeCountLabel.textColor = [UIColor blackColor];
//        likeCountLabel.backgroundColor = [UIColor whiteColor];
//        likeCountLabel.layer.cornerRadius = 3;
//        likeCountLabel.textAlignment = UITextAlignmentRight;
//        likeCountLabel.font = [UIFont fontWithName:@"QuicksandBold-Regular" size:12.0];
//        
//        
//        likeCountLabel.numberOfLines = 1;
//        CGSize maximumLabelSize = CGSizeMake(9999,likeCountLabel.frame.size.height);
//        CGSize expectedLabelSize = [[likeCountLabel text] sizeWithFont:[likeCountLabel font]
//                                                     constrainedToSize:maximumLabelSize
//                                                         lineBreakMode:[likeCountLabel lineBreakMode]];
//        expectedLabelSize.width = expectedLabelSize.width +2;
//
//        [likeCountLabel setFrame:CGRectMake(186, likeCountLabel.frame.origin.y, expectedLabelSize.width, 16)];
//        
//        
//    }
//    
    if ([commentCountString integerValue] ==0){
        
        commentCountLabel.hidden = YES;
        commentCountLabel.text = @"";

        
    }
    else
    {
        [commentCountLabel setText:commentCountString];
    }
//    else if ([commentCountString integerValue] == 1){
//
//        commentCountLabel.hidden = NO;
//
//        commentCountLabel.text = commentCountString;
//        commentCountLabel.textColor = [UIColor blackColor];
//        commentCountLabel.backgroundColor = [UIColor whiteColor];
//        commentCountLabel.layer.cornerRadius = 3;
//        commentCountLabel.textAlignment = UITextAlignmentCenter;
//        commentCountLabel.font = [UIFont fontWithName:@"QuicksandBold-Regular" size:12.0];
//        
//        commentCountLabel.numberOfLines = 1;
//        CGSize maximumLabelSize = CGSizeMake(9999,commentCountLabel.frame.size.height);
//        CGSize expectedLabelSize = [[commentCountLabel text] sizeWithFont:[commentCountLabel font]
//                                                        constrainedToSize:maximumLabelSize
//                                                            lineBreakMode:[commentCountLabel lineBreakMode]];
//        expectedLabelSize.width = expectedLabelSize.width +5;
//
//        [commentCountLabel setFrame:CGRectMake(283, commentCountLabel.frame.origin.y, expectedLabelSize.width, 16)];
//        
//    }else if ([commentCountString integerValue] !=0 && [commentCountString integerValue] >1) {
//        
//        commentCountLabel.hidden = NO;
//
//        commentCountLabel.text = commentCountString;
//        commentCountLabel.textColor = [UIColor blackColor];
//        commentCountLabel.backgroundColor = [UIColor whiteColor];
//        commentCountLabel.layer.cornerRadius = 3;
//        commentCountLabel.textAlignment = UITextAlignmentRight;
//        commentCountLabel.font = [UIFont fontWithName:@"QuicksandBold-Regular" size:12.0];
//        
//        commentCountLabel.numberOfLines = 1;
//        CGSize maximumLabelSize = CGSizeMake(9999,commentCountLabel.frame.size.height);
//        CGSize expectedLabelSize = [[commentCountLabel text] sizeWithFont:[commentCountLabel font]
//                                                        constrainedToSize:maximumLabelSize
//                                                            lineBreakMode:[commentCountLabel lineBreakMode]];
//        expectedLabelSize.width = expectedLabelSize.width +2;
//
//        [commentCountLabel setFrame:CGRectMake(283, commentCountLabel.frame.origin.y,         expectedLabelSize.width, 16)];
//    }
    
    
    
    
}

- (void) setupImageView {
    
    NSLog(@"the width is %@, and the height is: %@", contentImageWidth, contentImageHeight);
    
    
    NSURL *imageURL = [NSURL URLWithString:contentString];
    NSData *imageData = [NSData dataWithContentsOfURL:imageURL];
    
    UIImage *newImage = [[UIImage alloc] initWithData:imageData];
    
    if ([contentImageHeight doubleValue] >= [contentImageWidth doubleValue]) {
        
        NSLog(@"image taller than wide");
        
        double portraitRatio = [contentImageHeight doubleValue] / [contentImageWidth doubleValue];
        frameContentImageHeight = 300;
        frameContentImageWidth = 300 / portraitRatio;
        frameContentOriginX = (320 - frameContentImageWidth)/2;
        frameContentOriginY = 30;
        DetailContentImageView.frame = CGRectMake(frameContentOriginX, frameContentOriginY, frameContentImageWidth, frameContentImageHeight);
    }else if ([contentImageHeight integerValue] < [contentImageWidth integerValue]){
        
        NSLog(@"image wider than tall");
        frameContentImageHeight = [contentImageHeight doubleValue];
        frameContentImageWidth = [contentImageWidth doubleValue];
        
        double portraitRatio = (frameContentImageHeight/frameContentImageWidth);
        
        frameContentImageHeight = 320 * portraitRatio;
        frameContentImageWidth = 320;
        frameContentOriginX = (320 - frameContentImageWidth)/2;
        frameContentOriginY = 60;
        DetailContentImageView.frame = CGRectMake(frameContentOriginX, frameContentOriginY, frameContentImageWidth, frameContentImageHeight);
        NSLog(@"the new width is: %f and the new height is: %f", frameContentImageWidth, frameContentImageHeight);
        
    }
    
    [DetailContentImageView setImage:newImage];
    
    //Round the corners
    CALayer * layer = [DetailContentImageView layer];
    [layer setMasksToBounds:YES];
    [layer setCornerRadius:4.0];
    
    //Add a shadow by wrapping the avatar into a container
    container = [[UIView alloc] initWithFrame: DetailContentImageView.frame];
    
    DetailContentImageView.frame = CGRectMake(0,0,DetailContentImageView.frame.size.width, DetailContentImageView.frame.size.height);
    
    // setup shadow layer and corner
    container.layer.shadowColor = [UIColor blackColor].CGColor;
    container.layer.shadowOffset = CGSizeMake(0, 1);
    container.layer.shadowOpacity = 1;
    container.layer.shadowRadius = 5.0;
    container.layer.cornerRadius = 5.0;
    container.clipsToBounds = NO;
    
    // combine the views
    [container addSubview: DetailContentImageView];
    
    dispatch_async(dispatch_get_main_queue(), ^{
        [self.view addSubview:container];
        //[self.view sendSubviewToBack:container];
    });
}



- (void) handleSingleTapOnImage:(UITapGestureRecognizer *)sender {
    
    
    //    [self postCommentMethod];
    
}

- (void) handleSwipeLeft: (UISwipeGestureRecognizer *)sender {
    
    NSLog(@"swiped left");
}

- (void) handleSwipeRight: (UISwipeGestureRecognizer *)sender {
    
    NSLog(@"swiped right");
}

- (void) handleSingleTapToDismissFirstResponder: (UITapGestureRecognizer *)sender {
    
    [self.view endEditing:YES];
    
    
}

- (void) postCommentMethod {
    
    
    [MFSlidingView slideOut];
    
    SlidingCommentView *customView = [[[NSBundle mainBundle]loadNibNamed:@"SlidingCommentView" owner:self options:nil]objectAtIndex:0];
    
    //    customView.postTextContentTextView.text = @"Post Text Here";
    //    customView.postContentType = @"text";
    //    customView.postContentViewDelegate =self;
    //    customView.CommentScoreLabelOutlet.text = [NSString stringWithFormat:@"%@", [beaconContentDictionary objectForKey:@"score"]];
    
    customView.SlidingCommentTableViewOutlet.delegate = customView;
    customView.SlidingCommentTableViewOutlet.dataSource = customView;
    customView.AddCommentTextFieldOutlet.delegate=customView;
    customView.AddCommentTextFieldOutlet.returnKeyType = UIReturnKeyDone;
    customView.postSendingContentID = contentID;
    customView.userTask = @"PostComment";
    customView.contentVotedUp = contentVotedUp;
    customView.contentVotedDown = contentVotedDown;
    customView.contentNotVotedYet = contentNotVotedYet;
    customView.slidingCommentDelegate = self;
    customView.layer.cornerRadius = 2;
    
    UIImage *img = [UIImage imageNamed:@"bkgd_generic@2x.png"];
    
    UIImageView *backgroundNotificationsView = [[UIImageView alloc] initWithImage:img];
    [customView.SlidingCommentTableViewOutlet setBackgroundView:backgroundNotificationsView];
    customView.SlidingCommentTableViewOutlet.backgroundView.contentMode = UIViewContentModeTop;
    
    //    backgroundNotificationsView.alpha = 0.3;
    //
    //    [customView.SlidingCommentTableViewOutlet addSubview:backgroundNotificationsView];
    //    [customView.SlidingCommentTableViewOutlet sendSubviewToBack:backgroundNotificationsView];
    
    
    
    //    UITapGestureRecognizer *singleTapRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleSingleTapToDismissFirstResponder:)];
    //    [customView addGestureRecognizer:singleTapRecognizer];
    
    SlidingViewOptions options = CancelOnBackgroundPressed|AvoidKeyboard;
    void (^cancelOrDoneBlock)() = ^{
        
        [MFSlidingView slideOut];
        [customView.AddCommentTextFieldOutlet resignFirstResponder];
        
    };
    
    
    
    RadiusRequest *r = [RadiusRequest requestWithParameters:[NSDictionary dictionaryWithObjectsAndKeys:contentID, @"content_id", nil] apiMethod:@"comments" httpMethod:@"GET"];
    
    [r startWithCompletionHandler:^(id response, RadiusError *error) {
        
        // deal with response object
        NSLog(@"working on getting comments %@", response);
        if ([response isKindOfClass:[NSArray class]]) {
            customView.responseArray = response;
            [customView.SlidingCommentTableViewOutlet reloadData];
        }else if ([response isKindOfClass:[NSDictionary class]]){
            
            customView.responseDictionary = response;
            [customView.SlidingCommentTableViewOutlet reloadData];
            
        }
        
        
        [MFSlidingView slideView:customView intoView:self.navigationController.view onScreenPosition:MiddleOfScreen offScreenPosition:MiddleOfScreen title:@"Comments" options:options doneBlock:cancelOrDoneBlock cancelBlock:cancelOrDoneBlock];
        
    }];
    
}

-(void) incrementCommentScoreUp {
    
    if ([commentCountLabel.text isEqualToString:@""] || commentCountLabel.hidden == YES) {
        
        commentCountLabel.hidden = NO;
        commentCountLabel.text = @"1";
        commentCountString = commentCountLabel.text;
        commentCountLabel.textColor = [UIColor blackColor];
        commentCountLabel.backgroundColor = [UIColor whiteColor];
        commentCountLabel.layer.cornerRadius = 3;
        commentCountLabel.textAlignment = UITextAlignmentCenter;
        commentCountLabel.font = [UIFont fontWithName:@"QuicksandBold-Regular" size:commentCountLabel.font.pointSize];
        
        commentCountLabel.numberOfLines = 1;
        CGSize maximumLabelSize = CGSizeMake(9999,commentCountLabel.frame.size.height);
        CGSize expectedLabelSize = [[commentCountLabel text] sizeWithFont:[commentCountLabel font]
                                                        constrainedToSize:maximumLabelSize
                                                            lineBreakMode:[commentCountLabel lineBreakMode]];
        expectedLabelSize.width = expectedLabelSize.width +5;
        
        [commentCountLabel setFrame:CGRectMake(283, commentCountLabel.frame.origin.y, expectedLabelSize.width, 16)];
        
    }else{
        
        commentCountLabel.text = [NSString stringWithFormat:@"%i", [commentCountLabel.text integerValue]+1];
        commentCountString = commentCountLabel.text;
        CGSize maximumLabelSize = CGSizeMake(9999,commentCountLabel.frame.size.height);
        CGSize expectedLabelSize = [[commentCountLabel text] sizeWithFont:[commentCountLabel font]
                                                        constrainedToSize:maximumLabelSize
                                                            lineBreakMode:[commentCountLabel lineBreakMode]];
        expectedLabelSize.width = expectedLabelSize.width +2;
        
        [commentCountLabel setFrame:CGRectMake(283, commentCountLabel.frame.origin.y,         expectedLabelSize.width, 16)];
    }
    
    if ([beaconDetailContentImageDelegate respondsToSelector:@selector(populateBeaconContent)]) {
        [beaconDetailContentImageDelegate populateBeaconContent];
    }
    
}

- (void) setupVoteScoreAndButton {
    
    voteButtonOutlet.titleLabel.text = @"text";
    voteScoreLabel.text = [NSString stringWithFormat:@"%@", [beaconContentDictionary objectForKey:@"score"]];
    voteScoreLabel.font = [UIFont fontWithName:@"QuicksandBold-Regular" size:voteScoreLabel.font.pointSize];
    
    if (contentNotVotedYet == YES) {
        
        UIImage *buttonImg = [UIImage imageNamed:@"btn_cvp_like.png"];
        [self.voteButtonOutlet setImage:buttonImg forState:UIControlStateNormal];
        
    }else if (contentVotedDown == YES){
        voteButtonOutlet.imageView.image = [UIImage imageNamed:@"ico_me.png"];
        voteButtonOutlet.alpha = 0.5;
        
    }else if (contentVotedUp == YES){
        
        UIImage *buttonImg = [UIImage imageNamed:@"btn_cvp_like_green.png"];
        [self.voteButtonOutlet setImage:buttonImg forState:UIControlStateNormal];
        
    }
    
    
}

- (IBAction)voteButtonPressed:(id)sender {
    
    if (contentNotVotedYet) {
        
        
        RadiusRequest *r = [RadiusRequest requestWithParameters:[NSDictionary dictionaryWithObjectsAndKeys:contentID, @"content_id", @"up", @"type", nil] apiMethod:@"content/vote" httpMethod:@"POST"];
        
        [r startWithCompletionHandler:^(id response, RadiusError *error) {
            
            // deal with response object
            NSLog(@"working %@", response);
            contentVotedUp = YES;
            contentNotVotedYet = NO;
            if ([response objectForKey:@"score"] != nil) {
//                [likeCountLabel setText:[NSString stringWithFormat:@"%@",[response objectForKey:@"score"]]];
                likeCountString = [NSString stringWithFormat:@"%@",[response objectForKey:@"score"]];
                [self setupLikeAndCommentLabels];
            }
            UIImage *newImageForLikeButton = [UIImage imageNamed:@"btn_cvp_like_green@2x.png"];
            
            [voteButtonOutlet setImage:newImageForLikeButton forState:UIControlStateNormal];
            
            if ([beaconDetailContentImageDelegate respondsToSelector:@selector(populateBeaconContent)]) {
                [beaconDetailContentImageDelegate populateBeaconContent];
            }
            
        }];
        
    }else if (contentVotedUp) {
        
        
        RadiusRequest *r = [RadiusRequest requestWithParameters:[NSDictionary dictionaryWithObjectsAndKeys:userTokenString, @"token", contentID, @"content_id", @"reset", @"type", nil] apiMethod:@"content/vote" httpMethod:@"POST"];
        
        [r startWithCompletionHandler:^(id response, RadiusError *error) {
            
            // deal with response object
            NSLog(@"working %@", response);
            contentVotedUp = NO;
            contentNotVotedYet = YES;
            if ([response objectForKey:@"score"] != nil) {
                likeCountString = [NSString stringWithFormat:@"%@",[response objectForKey:@"score"]];
                [self setupLikeAndCommentLabels];
            }
            UIImage *newImageForLikeButton = [UIImage imageNamed:@"btn_cvp_like@2x.png"];
            
            [voteButtonOutlet setImage:newImageForLikeButton forState:UIControlStateNormal];
            
            if ([beaconDetailContentImageDelegate respondsToSelector:@selector(populateBeaconContent)]) {
                [beaconDetailContentImageDelegate populateBeaconContent];
            }
        }];
        
    }
    
}

- (IBAction)shareButtonPressed:(id)sender
{
    PopupView *popupAlert = [[[NSBundle mainBundle]loadNibNamed:@"PopupView" owner:self options:nil]objectAtIndex:0];
    [popupAlert setupWithDescriptionText:@"To share on Facebook, go to settings and connect your account!" andButtonText:@"OK"];
    ShareToFacebookView *shareToFBView = [[[NSBundle mainBundle]loadNibNamed:@"ShareToFacebookView" owner:self options:nil]objectAtIndex:0];
    [shareToFBView setupFBViewWithContentID:contentID];
    
    SlidingViewOptions options = CancelOnBackgroundPressed|AvoidKeyboard;
    void (^cancelOrDoneBlock)() = ^{
        // we must manually slide out the view out if we specify this block
        [MFSlidingView slideOut];
    };
    
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    if ([defaults objectForKey:@"fb_access_token"])
    {
        [MFSlidingView slideView:shareToFBView intoView:self.navigationController.view onScreenPosition:MiddleOfScreen offScreenPosition:MiddleOfScreen title:nil options:options doneBlock:cancelOrDoneBlock cancelBlock:cancelOrDoneBlock];
    }
    else
    {
        [MFSlidingView slideView:popupAlert intoView:self.navigationController.view onScreenPosition:MiddleOfScreen offScreenPosition:MiddleOfScreen title:nil options:options doneBlock:cancelOrDoneBlock cancelBlock:cancelOrDoneBlock];
    }
    
    //    [shareToFBView setFrame:CGRectMake(self.view.frame.size.width/2-shareToFBView.frame.size.width/2, 100, shareToFBView.frame.size.width, shareToFBView.frame.size.height)];
    //    //Dim background and navigation bar, add gesture recognizers to exit
    //    UITapGestureRecognizer *recognizerForSubView = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleTapBehindAgain:)];
    //    [recognizerForSubView setNumberOfTapsRequired:1];
    //    recognizerForSubView.cancelsTouchesInView = NO; //So the user can still interact with controls in the modal view
    //    [shareToFBView addGestureRecognizer:recognizerForSubView];
    //    //customView.layer.cornerRadius = 15;
    //    UIView *dimView = [[UIView alloc] init];
    //    dimView.frame= CGRectMake(0, 0, self.navigationController.view.frame.size.width, self.navigationController.view.frame.size.height);
    //    dimView.backgroundColor = [UIColor blackColor];
    //    dimView.alpha = 0.6;
    //    [self.view addSubview:dimView];
    //
    //    UIView *dimViewForNavBar = [[UIView alloc] init];
    //    dimViewForNavBar.frame= CGRectMake(0, 0, self.navigationController.navigationBar.frame.size.width, self.navigationController.navigationBar.frame.size.height);
    //    dimViewForNavBar.backgroundColor = [UIColor blackColor];
    //    dimViewForNavBar.alpha = 0.6;
    //
    //    UIPanGestureRecognizer *recognizerToBlock = [[UIPanGestureRecognizer alloc]initWithTarget:self action:nil];
    //    [dimViewForNavBar addGestureRecognizer:recognizerToBlock];
    //    [self.navigationController.navigationBar addSubview:dimViewForNavBar];
    //
    //
    //    [self catchTapForNavBar:dimViewForNavBar];
    //    [self catchTapForView:self.view];
    //
    //    [self.view addSubview:shareToFBView];
}

//- (void)catchTapForView:(UIView *)view {
//    [self resignFirstResponder];
//    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
//    button.frame = view.bounds;
//    [button addTarget:self action:@selector(dismissButton:) forControlEvents:UIControlEventTouchUpInside];
//    [view addSubview:button];
//}
//
//- (void)catchTapForNavBar:(UIView *)view {
//    [self resignFirstResponder];
//    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
//    button.frame = view.bounds;
//    [button addTarget:self action:@selector(dismissButtonFromNavBar:) forControlEvents:UIControlEventTouchUpInside];
//    [view addSubview:button];
//}

- (IBAction)commentButtonPressed:(id)sender {
    [self postCommentMethod];
}

-(void)imageTapped
{    
    [UIView animateWithDuration:0.4 animations:^{
        if ([topInfoBarView alpha] > 0)
        {
            [topInfoBarView setAlpha:0];
//            [self.navigationController.navigationBar setAlpha:0];
        }
        else
        {
            [self.view bringSubviewToFront:topInfoBarView];
            [topInfoBarView setAlpha:0.8];

//            [self.navigationController.navigationBar setAlpha:1];


        }
        if ([bottomInfoBarView alpha] > 0)
        {
            [bottomInfoBarView setAlpha:0];
        }
        else
        {
            [self.view bringSubviewToFront:bottomInfoBarView];
            [bottomInfoBarView setAlpha:0.8];
        }
    }];
}

-(void) addTapRecognizerToImage
{
    imageTapRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(imageTapped)];
    imageTapRecognizer.cancelsTouchesInView = NO;
    [DetailContentImageView addGestureRecognizer:imageTapRecognizer];
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    [self setupSideMenuBarButtonItem];
    [self setupNameButtons];
    [self addTapRecognizerToImage];
    
    
    commentCountString = [NSString stringWithFormat:@"%@", [beaconContentDictionary objectForKey:@"num_comments"]];
    
    [self setupLikeAndCommentLabels];
    [self setupDescriptionLabel];
//    [self setupFrameForTopAndBottomBar];
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{
        [self setupImageView];
    });
    
    [self setupVoteScoreAndButton];
	// Do any additional setup after loading the view.
    
    //    UIImage *img = [UIImage imageNamed:@"bkgd_generic.png"];
    //
    //    UIImageView *backgroundNotificationsView = [[UIImageView alloc] initWithImage:img];
    //    backgroundNotificationsView.alpha = 01.0;
    //
    //    [self.view addSubview:backgroundNotificationsView];
    
    
    UIView *dimView = [[UIView alloc] init];
    dimView.frame= CGRectMake(0, 0, self.navigationController.view.frame.size.width, self.navigationController.view.frame.size.height);
    dimView.backgroundColor = [UIColor blackColor];
    dimView.alpha = 0.5;
    [self.view addSubview:dimView];

    
}

-(void) setupFrameForTopAndBottomBar {
    
    [self.navigationController.navigationBar setAlpha:0];
    
    self.topInfoBarView.frame = CGRectMake(self.topInfoBarView.frame.origin.x, self.topInfoBarView.frame.origin.y +44, self.topInfoBarView.frame.size.width, self.topInfoBarView.frame.size.height);
    self.bottomInfoBarView.frame = CGRectMake(self.bottomInfoBarView.frame.origin.x, self.bottomInfoBarView.frame.origin.y +44, self.bottomInfoBarView.frame.size.width, self.bottomInfoBarView.frame.size.height);
    self.DetailContentImageView.frame = CGRectMake(self.DetailContentImageView.frame.origin.x, self.DetailContentImageView.frame.origin.y +44, self.DetailContentImageView.frame.size.width, self.DetailContentImageView.frame.size.height);
}

-(void)setupDescriptionLabel
{
    descriptionLabel.font = [UIFont fontWithName:@"Quicksand" size:descriptionLabel.font.pointSize];
    
    NSString *description = [beaconContentDictionary objectForKey:@"description"];
    if([description isKindOfClass:[NSNull class]]) {
        description = @"";
    }
    descriptionLabel.text = description;
}

-(void)setupNameButtons
{
    //    [[nameButton layer] setCornerRadius:8.0f];
    //    [[nameButton layer] setBorderWidth:1.0f];
    
    DateAndTimeHelper *dateHelper = [[DateAndTimeHelper alloc] init];
    NSDate *postDate = [NSDate dateWithTimeIntervalSince1970:[[beaconContentDictionary objectForKey:@"timestamp"] doubleValue]];
    NSString *dateString = [dateHelper timeIntervalWithStartDate:postDate withEndDate:[NSDate date]]; //[NSDate date] gets the current date
    
    [nameButton.titleLabel setFont:[UIFont fontWithName:@"Quicksand" size:nameButton.titleLabel.font.pointSize]];
    [nameButton setTitle:[NSString stringWithFormat:@"%@ posted %@",[[beaconContentDictionary objectForKey:@"poster_o"] objectForKey:@"display_name"], dateString] forState:UIControlStateNormal];
    [beaconNameButton.titleLabel setFont:[UIFont fontWithName:@"Quicksand" size:beaconNameButton.titleLabel.font.pointSize]];
    [beaconNameButton setTitle:beaconNameString forState:UIControlStateNormal];
}

- (IBAction)beaconNameLabelPressed:(id)sender
{
    BeaconContentViewController2 *demoController = [self.storyboard instantiateViewControllerWithIdentifier:@"beaconContentID2"];
    [demoController initializeWithBeaconID:beaconIDString];
    [self.navigationController pushViewController:demoController animated:YES];
}
- (IBAction)nameLabelPressed:(id)sender
{
    ProfileViewController2 *meProfileController = [self.storyboard instantiateViewControllerWithIdentifier:@"meProfileViewID2"];
    
    [meProfileController initializeWithUserID:userNameString.integerValue];
    
    [self.navigationController pushViewController:meProfileController animated:YES];
}

-(void) setupContentSettingsButton {
    
    NSString *userIDString1 = [NSString stringWithFormat:@"%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"id"]];
    
    NSLog(@"%@", userIDString1);
    
    
    if ([userIDString1 isEqualToString:posterIDString]) {
        
        [self.contentOwnerSettingsButton setHidden:NO];
        self.currentUserIsContentOwner = YES;
        
    }else {
        
        [self.contentOwnerSettingsButton setHidden:YES];
        self.currentUserIsContentOwner = NO;

        
    }
    
}

#pragma mark Apple Methods

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

- (void)viewDidUnload {
    [self setDetailContentImageView:nil];
    [self setBeaconImageCommentTableViewOutlet:nil];
    [self setNameButton:nil];
    [self setBeaconNameButton:nil];
    [self setTopInfoBarView:nil];
    [self setLikeCountLabel:nil];
    [self setCommentCountLabel:nil];
    [self setBottomInfoBarView:nil];
    [self setDescriptionLabel:nil];
<<<<<<< HEAD
    [self setContentOwnerSettingsButton:nil];
=======
    [self setLikeView:nil];
    [self setCommentView:nil];
>>>>>>> 096243ddec8e4b6cced09b9b20a441e87a046fae
    [super viewDidUnload];
}

- (IBAction)contentOwnerSettingsButtonPressed:(id)sender {
}
@end
